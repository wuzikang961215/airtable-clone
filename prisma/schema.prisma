generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  Base          Base[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Base {
  id        String   @id @default(cuid())
  name      String
  userId    String
  createdAt DateTime @default(now())
  isDeleted Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  tables    Table[]
}

model Table {
  id        String   @id @default(cuid())
  name      String
  baseId    String
  createdAt DateTime @default(now())
  isDeleted Boolean  @default(false)
  columns   Column[]
  rows      Row[]
  base      Base     @relation(fields: [baseId], references: [id])
  views     View[]
}

model Column {
  id        String  @id @default(cuid())
  name      String
  type      String
  order     Int
  tableId   String
  isDeleted Boolean @default(false)
  Cell      Cell[]
  table     Table   @relation(fields: [tableId], references: [id])
}

model Row {
  id        String   @id @default(cuid())
  tableId   String
  createdAt DateTime @default(now())
  isDeleted Boolean  @default(false)
  cells     Cell[]
  table     Table    @relation(fields: [tableId], references: [id])
}

model Cell {
  id       String @id @default(cuid())
  rowId    String
  columnId String
  value    String
  column   Column @relation(fields: [columnId], references: [id])
  row      Row    @relation(fields: [rowId], references: [id])
}

model View {
  id            String   @id @default(cuid())
  name          String
  tableId       String
  createdAt     DateTime @default(now())
  filters       Json
  sorts         Json
  hiddenColumns Json
  table         Table    @relation(fields: [tableId], references: [id])
}
