// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Base          Base[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Base {
  id        String   @id @default(cuid())
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  tables    Table[]
}

model Table {
  id        String   @id @default(cuid())
  name      String
  baseId    String
  base      Base     @relation(fields: [baseId], references: [id])
  createdAt DateTime @default(now())
  columns   Column[]
  rows      Row[]

  views View[]
}

model Column {
  id      String @id @default(cuid())
  name    String
  type    String // e.g. "text", "number"
  order   Int // for left-right ordering
  tableId String
  table   Table  @relation(fields: [tableId], references: [id])
  Cell    Cell[]
}

model Row {
  id        String   @id @default(cuid())
  tableId   String
  table     Table    @relation(fields: [tableId], references: [id])
  createdAt DateTime @default(now())
  cells     Cell[]
}

model Cell {
  id       String @id @default(cuid())
  rowId    String
  row      Row    @relation(fields: [rowId], references: [id])
  columnId String
  column   Column @relation(fields: [columnId], references: [id])
  value    String
}

model View {
  id        String   @id @default(cuid())
  name      String
  tableId   String
  table     Table    @relation(fields: [tableId], references: [id])
  createdAt DateTime @default(now())

  filters       Json // store array of filter objects: columnId, operator, value
  sorts         Json // store array of sort config: columnId, direction
  hiddenColumns Json // array of hidden columnIds
}
